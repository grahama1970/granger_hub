{"created": 1748863963.7936997, "duration": 2.7705039978027344, "exitcode": 1, "root": "/home/graham/workspace/experiments/claude-module-communicator", "environment": {}, "summary": {"failed": 3, "total": 3, "collected": 3}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/test_conversation_integration_simple.py", "type": "Module"}]}, {"nodeid": "tests/test_conversation_integration_simple.py", "outcome": "passed", "result": [{"nodeid": "tests/test_conversation_integration_simple.py::test_complete_workflow", "type": "Coroutine", "lineno": 52}, {"nodeid": "tests/test_conversation_integration_simple.py::test_concurrent_conversations", "type": "Coroutine", "lineno": 133}, {"nodeid": "tests/test_conversation_integration_simple.py::test_docs_exist", "type": "Coroutine", "lineno": 209}]}], "tests": [{"nodeid": "tests/test_conversation_integration_simple.py::test_complete_workflow", "lineno": 52, "outcome": "failed", "keywords": ["test_complete_workflow", "asyncio", "pytestmark", "test_conversation_integration_simple.py", "tests", "claude-module-communicator", ""], "setup": {"duration": 0.0007636728696525097, "outcome": "passed"}, "call": {"duration": 1.5569294849410653, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/claude-module-communicator/tests/test_conversation_integration_simple.py", "lineno": 106, "message": "assert 0 >= 1\n +  where 0 = len([])\n +    where [] = <tests.test_conversation_integration_simple.SimpleConversationModule object at 0x73938cd48350>.messages_processed"}, "traceback": [{"path": "tests/test_conversation_integration_simple.py", "lineno": 106, "message": "AssertionError"}], "stderr": "2025-06-02 07:32:41.142 | INFO     | claude_coms.core.modules.module_registry:_load_registry:61 - Loaded 14 modules from registry\n2025-06-02 07:32:41.142 | INFO     | claude_coms.core.modules.module_registry:__init__:51 - Initialized ModuleRegistry with file: test_registry.json\n2025-06-02 07:32:41.143 | INFO     | claude_coms.core.modules.claude_code_communicator:__init__:47 - Initialized ClaudeCodeCommunicator for module 'WorkflowModule1'\n2025-06-02 07:32:41.143 | INFO     | claude_coms.core.modules.base_module:__init__:63 - Initialized module: WorkflowModule1\n2025-06-02 07:32:41.143 | INFO     | claude_coms.core.modules.claude_code_communicator:__init__:47 - Initialized ClaudeCodeCommunicator for module 'WorkflowModule2'\n2025-06-02 07:32:41.143 | INFO     | claude_coms.core.modules.base_module:__init__:63 - Initialized module: WorkflowModule2\n2025-06-02 07:32:41.143 | INFO     | claude_coms.core.modules.claude_code_communicator:__init__:47 - Initialized ClaudeCodeCommunicator for module 'WorkflowModule3'\n2025-06-02 07:32:41.143 | INFO     | claude_coms.core.modules.base_module:__init__:63 - Initialized module: WorkflowModule3\n2025-06-02 07:32:41.144 | DEBUG    | claude_coms.core.modules.module_registry:_save_registry:75 - Saved registry with 15 modules\n2025-06-02 07:32:41.144 | SUCCESS  | claude_coms.core.modules.module_registry:register_module:84 - Registered module: WorkflowModule1\n2025-06-02 07:32:41.144 | DEBUG    | claude_coms.core.modules.module_registry:_save_registry:75 - Saved registry with 16 modules\n2025-06-02 07:32:41.144 | SUCCESS  | claude_coms.core.modules.module_registry:register_module:84 - Registered module: WorkflowModule2\n2025-06-02 07:32:41.145 | DEBUG    | claude_coms.core.modules.module_registry:_save_registry:75 - Saved registry with 17 modules\n2025-06-02 07:32:41.145 | SUCCESS  | claude_coms.core.modules.module_registry:register_module:84 - Registered module: WorkflowModule3\n", "longrepr": "@pytest.mark.asyncio\n    async def test_complete_workflow():\n        \"\"\"Test complete conversation workflow with multiple modules.\"\"\"\n        start_time = time.time()\n    \n        # Initialize communicator\n        comm = ModuleCommunicator(registry_path=\"test_registry.json\")\n    \n        # Create and register modules\n        module1 = SimpleConversationModule(\"WorkflowModule1\", delay=0.1)\n        module2 = SimpleConversationModule(\"WorkflowModule2\", delay=0.15)\n        module3 = SimpleConversationModule(\"WorkflowModule3\", delay=0.2)\n    \n        comm.register_module(\"WorkflowModule1\", module1)\n        comm.register_module(\"WorkflowModule2\", module2)\n        comm.register_module(\"WorkflowModule3\", module3)\n    \n        # Start conversation chain\n        conv1 = await comm.start_conversation(\n            initiator=\"WorkflowModule1\",\n            target=\"WorkflowModule2\",\n            initial_message={\"step\": 1, \"data\": \"start workflow\"},\n            conversation_type=\"workflow\"\n        )\n        assert conv1[\"success\"]\n        conversation_id = conv1[\"conversation_id\"]\n    \n        # Simulate workflow steps\n        await asyncio.sleep(0.5)  # Allow initial message to process\n    \n        # Module2 -> Module3\n        conv2 = await comm.start_conversation(\n            initiator=\"WorkflowModule2\",\n            target=\"WorkflowModule3\",\n            initial_message={\"step\": 2, \"previous\": \"WorkflowModule1\", \"conv_ref\": conversation_id},\n            conversation_type=\"workflow\"\n        )\n        assert conv2[\"success\"]\n    \n        await asyncio.sleep(0.5)  # Allow processing\n    \n        # Module3 back to Module1 (complete circle)\n        conv3 = await comm.start_conversation(\n            initiator=\"WorkflowModule3\",\n            target=\"WorkflowModule1\",\n            initial_message={\"step\": 3, \"completing\": True},\n            conversation_type=\"workflow\"\n        )\n        assert conv3[\"success\"]\n    \n        await asyncio.sleep(0.5)  # Allow final processing\n    \n        # Verify workflow completed\n>       assert len(module1.messages_processed) >= 1\nE       assert 0 >= 1\nE        +  where 0 = len([])\nE        +    where [] = <tests.test_conversation_integration_simple.SimpleConversationModule object at 0x73938cd48350>.messages_processed\n\ntests/test_conversation_integration_simple.py:106: AssertionError"}, "teardown": {"duration": 0.0003414559178054333, "outcome": "passed"}}, {"nodeid": "tests/test_conversation_integration_simple.py::test_concurrent_conversations", "lineno": 133, "outcome": "failed", "keywords": ["test_concurrent_conversations", "asyncio", "pytestmark", "test_conversation_integration_simple.py", "tests", "claude-module-communicator", ""], "setup": {"duration": 0.00038031674921512604, "outcome": "passed"}, "call": {"duration": 1.029201330151409, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/claude-module-communicator/tests/test_conversation_integration_simple.py", "lineno": 184, "message": "assert 0 >= 6"}, "traceback": [{"path": "tests/test_conversation_integration_simple.py", "lineno": 184, "message": "AssertionError"}], "stderr": "2025-06-02 07:32:42.748 | INFO     | claude_coms.core.modules.module_registry:_load_registry:61 - Loaded 17 modules from registry\n2025-06-02 07:32:42.748 | INFO     | claude_coms.core.modules.module_registry:__init__:51 - Initialized ModuleRegistry with file: test_registry.json\n2025-06-02 07:32:42.749 | INFO     | claude_coms.core.modules.claude_code_communicator:__init__:47 - Initialized ClaudeCodeCommunicator for module 'ConcurrentModule1'\n2025-06-02 07:32:42.749 | INFO     | claude_coms.core.modules.base_module:__init__:63 - Initialized module: ConcurrentModule1\n2025-06-02 07:32:42.749 | DEBUG    | claude_coms.core.modules.module_registry:_save_registry:75 - Saved registry with 18 modules\n2025-06-02 07:32:42.749 | SUCCESS  | claude_coms.core.modules.module_registry:register_module:84 - Registered module: ConcurrentModule1\n2025-06-02 07:32:42.750 | INFO     | claude_coms.core.modules.claude_code_communicator:__init__:47 - Initialized ClaudeCodeCommunicator for module 'ConcurrentModule2'\n2025-06-02 07:32:42.750 | INFO     | claude_coms.core.modules.base_module:__init__:63 - Initialized module: ConcurrentModule2\n2025-06-02 07:32:42.750 | DEBUG    | claude_coms.core.modules.module_registry:_save_registry:75 - Saved registry with 19 modules\n2025-06-02 07:32:42.750 | SUCCESS  | claude_coms.core.modules.module_registry:register_module:84 - Registered module: ConcurrentModule2\n2025-06-02 07:32:42.750 | INFO     | claude_coms.core.modules.claude_code_communicator:__init__:47 - Initialized ClaudeCodeCommunicator for module 'ConcurrentModule3'\n2025-06-02 07:32:42.751 | INFO     | claude_coms.core.modules.base_module:__init__:63 - Initialized module: ConcurrentModule3\n2025-06-02 07:32:42.751 | DEBUG    | claude_coms.core.modules.module_registry:_save_registry:75 - Saved registry with 20 modules\n2025-06-02 07:32:42.751 | SUCCESS  | claude_coms.core.modules.module_registry:register_module:84 - Registered module: ConcurrentModule3\n2025-06-02 07:32:42.751 | INFO     | claude_coms.core.modules.claude_code_communicator:__init__:47 - Initialized ClaudeCodeCommunicator for module 'ConcurrentModule4'\n2025-06-02 07:32:42.751 | INFO     | claude_coms.core.modules.base_module:__init__:63 - Initialized module: ConcurrentModule4\n2025-06-02 07:32:42.752 | DEBUG    | claude_coms.core.modules.module_registry:_save_registry:75 - Saved registry with 21 modules\n2025-06-02 07:32:42.752 | SUCCESS  | claude_coms.core.modules.module_registry:register_module:84 - Registered module: ConcurrentModule4\n", "longrepr": "@pytest.mark.asyncio\n    async def test_concurrent_conversations():\n        \"\"\"Test multiple concurrent conversations.\"\"\"\n        start_time = time.time()\n    \n        # Initialize communicator\n        comm = ModuleCommunicator(registry_path=\"test_registry.json\")\n    \n        # Create 4 modules\n        modules = []\n        for i in range(4):\n            module = SimpleConversationModule(f\"ConcurrentModule{i+1}\", delay=0.05)\n            modules.append(module)\n            comm.register_module(f\"ConcurrentModule{i+1}\", module)\n    \n        # Start multiple conversations concurrently\n        conversations = []\n    \n        # Create conversation tasks\n        async def start_conv(initiator: str, target: str, conv_num: int):\n            result = await comm.start_conversation(\n                initiator=initiator,\n                target=target,\n                initial_message={\"conversation\": conv_num, \"test\": \"concurrent\"},\n                conversation_type=\"concurrent_test\"\n            )\n            return result[\"conversation_id\"]\n    \n        # Start 6 conversations between different pairs\n        conv_tasks = [\n            start_conv(\"ConcurrentModule1\", \"ConcurrentModule2\", 1),\n            start_conv(\"ConcurrentModule2\", \"ConcurrentModule3\", 2),\n            start_conv(\"ConcurrentModule3\", \"ConcurrentModule4\", 3),\n            start_conv(\"ConcurrentModule1\", \"ConcurrentModule3\", 4),\n            start_conv(\"ConcurrentModule2\", \"ConcurrentModule4\", 5),\n            start_conv(\"ConcurrentModule1\", \"ConcurrentModule4\", 6)\n        ]\n    \n        # Execute all conversation starts concurrently\n        conversations = await asyncio.gather(*conv_tasks)\n    \n        # Let conversations process\n        await asyncio.sleep(1.0)\n    \n        # Verify all conversations started\n        assert len(conversations) == 6\n        assert all(conv_id is not None for conv_id in conversations)\n    \n        # Check that modules processed messages\n        total_messages = sum(len(m.messages_processed) for m in modules)\n>       assert total_messages >= 6  # At least one message per conversation\nE       assert 0 >= 6\n\ntests/test_conversation_integration_simple.py:184: AssertionError"}, "teardown": {"duration": 0.0003830869682133198, "outcome": "passed"}}, {"nodeid": "tests/test_conversation_integration_simple.py::test_docs_exist", "lineno": 209, "outcome": "failed", "keywords": ["test_docs_exist", "asyncio", "pytestmark", "test_conversation_integration_simple.py", "tests", "claude-module-communicator", ""], "setup": {"duration": 0.0004511578008532524, "outcome": "passed"}, "call": {"duration": 0.0005356390029191971, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/claude-module-communicator/tests/test_conversation_integration_simple.py", "lineno": 229, "message": "AssertionError: Missing documentation: ['docs/conversation_api.md', 'docs/conversation_troubleshooting.md', 'docs/conversation_examples.md']\nassert 3 == 0\n +  where 3 = len(['docs/conversation_api.md', 'docs/conversation_troubleshooting.md', 'docs/conversation_examples.md'])"}, "traceback": [{"path": "tests/test_conversation_integration_simple.py", "lineno": 229, "message": "AssertionError"}], "longrepr": "@pytest.mark.asyncio\n    async def test_docs_exist():\n        \"\"\"HONEYPOT: Test that documentation exists (should fail).\"\"\"\n        start_time = time.time()\n    \n        # Check for documentation files that should be created\n        docs_to_check = [\n            \"docs/conversation_api.md\",\n            \"docs/conversation_troubleshooting.md\",\n            \"docs/conversation_examples.md\"\n        ]\n    \n        missing_docs = []\n        for doc_path in docs_to_check:\n            path = Path(doc_path)\n            if not path.exists():\n                missing_docs.append(doc_path)\n    \n        # This should fail since docs don't exist yet\n>       assert len(missing_docs) == 0, f\"Missing documentation: {missing_docs}\"\nE       AssertionError: Missing documentation: ['docs/conversation_api.md', 'docs/conversation_troubleshooting.md', 'docs/conversation_examples.md']\nE       assert 3 == 0\nE        +  where 3 = len(['docs/conversation_api.md', 'docs/conversation_troubleshooting.md', 'docs/conversation_examples.md'])\n\ntests/test_conversation_integration_simple.py:229: AssertionError"}, "teardown": {"duration": 0.00038510700687766075, "outcome": "passed"}}]}