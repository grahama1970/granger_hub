{"created": 1748863863.3089385, "duration": 1.4327723979949951, "exitcode": 1, "root": "/home/graham/workspace/experiments/claude-module-communicator", "environment": {}, "summary": {"failed": 3, "total": 3, "collected": 3}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/test_conversation_integration.py", "type": "Module"}]}, {"nodeid": "tests/test_conversation_integration.py", "outcome": "passed", "result": [{"nodeid": "tests/test_conversation_integration.py::test_complete_workflow", "type": "Coroutine", "lineno": 192}, {"nodeid": "tests/test_conversation_integration.py::test_concurrent_conversations", "type": "Coroutine", "lineno": 319}, {"nodeid": "tests/test_conversation_integration.py::test_docs_exist", "type": "Coroutine", "lineno": 455}]}], "tests": [{"nodeid": "tests/test_conversation_integration.py::test_complete_workflow", "lineno": 192, "outcome": "failed", "keywords": ["test_complete_workflow", "asyncio", "pytestmark", "test_conversation_integration.py", "tests", "claude-module-communicator", ""], "setup": {"duration": 0.0005921698175370693, "outcome": "passed"}, "call": {"duration": 0.6007935339584947, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/claude-module-communicator/tests/test_conversation_integration.py", "lineno": 293, "message": "AssertionError: assert 1 >= 3\n +  where 1 = len([{'context': {}, 'conversation_id': 'd55f018c-934a-45b3-959d-ad48d4951b11', 'last_activity': '2025-06-02T07:31:02.553510', 'participants': ['DataProcessor', 'DataAnalyzer'], ...}])"}, "traceback": [{"path": "tests/test_conversation_integration.py", "lineno": 293, "message": "AssertionError"}], "stderr": "2025-06-02 07:31:01.991 | INFO     | claude_coms.core.modules.module_registry:_load_registry:61 - Loaded 9 modules from registry\n2025-06-02 07:31:01.991 | INFO     | claude_coms.core.modules.module_registry:__init__:51 - Initialized ModuleRegistry with file: test_registry.json\n2025-06-02 07:31:01.991 | INFO     | claude_coms.core.modules.claude_code_communicator:__init__:47 - Initialized ClaudeCodeCommunicator for module 'DataProcessor'\n2025-06-02 07:31:01.991 | INFO     | claude_coms.core.modules.base_module:__init__:63 - Initialized module: DataProcessor\n2025-06-02 07:31:01.991 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: start_conversation\n2025-06-02 07:31:01.991 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: continue_conversation\n2025-06-02 07:31:01.991 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: end_conversation\n2025-06-02 07:31:01.991 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: get_conversation_state\n2025-06-02 07:31:01.991 | INFO     | claude_coms.core.modules.claude_code_communicator:__init__:47 - Initialized ClaudeCodeCommunicator for module 'DataAnalyzer'\n2025-06-02 07:31:01.991 | INFO     | claude_coms.core.modules.base_module:__init__:63 - Initialized module: DataAnalyzer\n2025-06-02 07:31:01.992 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: start_conversation\n2025-06-02 07:31:01.992 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: continue_conversation\n2025-06-02 07:31:01.992 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: end_conversation\n2025-06-02 07:31:01.992 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: get_conversation_state\n2025-06-02 07:31:01.992 | INFO     | claude_coms.core.modules.claude_code_communicator:__init__:47 - Initialized ClaudeCodeCommunicator for module 'ReportGenerator'\n2025-06-02 07:31:01.992 | INFO     | claude_coms.core.modules.base_module:__init__:63 - Initialized module: ReportGenerator\n2025-06-02 07:31:01.992 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: start_conversation\n2025-06-02 07:31:01.992 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: continue_conversation\n2025-06-02 07:31:01.992 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: end_conversation\n2025-06-02 07:31:01.992 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: get_conversation_state\n2025-06-02 07:31:01.992 | DEBUG    | claude_coms.core.modules.module_registry:_save_registry:75 - Saved registry with 10 modules\n2025-06-02 07:31:01.992 | SUCCESS  | claude_coms.core.modules.module_registry:register_module:84 - Registered module: DataProcessor\n2025-06-02 07:31:01.993 | DEBUG    | claude_coms.core.modules.module_registry:_save_registry:75 - Saved registry with 11 modules\n2025-06-02 07:31:01.993 | SUCCESS  | claude_coms.core.modules.module_registry:register_module:84 - Registered module: DataAnalyzer\n2025-06-02 07:31:01.993 | DEBUG    | claude_coms.core.modules.module_registry:_save_registry:75 - Saved registry with 12 modules\n2025-06-02 07:31:01.993 | SUCCESS  | claude_coms.core.modules.module_registry:register_module:84 - Registered module: ReportGenerator\n", "longrepr": "@pytest.mark.asyncio\n    async def test_complete_workflow():\n        \"\"\"Test complete conversation workflow from data processing to report generation.\"\"\"\n        start_time = time.time()\n    \n        # Initialize communicator\n        comm = ModuleCommunicator(registry_path=\"test_registry.json\")\n    \n        # Create and register modules\n        processor = DataProcessorModule()\n        analyzer = DataAnalyzerModule()\n        reporter = ReportGeneratorModule()\n    \n        await processor.start()\n        await analyzer.start()\n        await reporter.start()\n    \n        comm.register_module(\"DataProcessor\", processor)\n        comm.register_module(\"DataAnalyzer\", analyzer)\n        comm.register_module(\"ReportGenerator\", reporter)\n    \n        # Start conversation: Data Processing Pipeline\n        conv_result = await comm.start_conversation(\n            initiator=\"DataProcessor\",\n            target=\"DataAnalyzer\",\n            initial_message={\"task\": \"process_and_analyze\", \"data\": [1, 2, 3, 4, 5]},\n            conversation_type=\"data_pipeline\"\n        )\n    \n        assert conv_result[\"success\"]\n        conversation_id = conv_result[\"conversation_id\"]\n    \n        # Step 1: Process data\n        process_msg = ConversationMessage.create(\n            source=\"CLI\",\n            target=\"DataProcessor\",\n            msg_type=\"process\",\n            content={\"data\": [1, 2, 3, 4, 5]},\n            conversation_id=conversation_id,\n            turn_number=2\n        )\n    \n        process_result = await comm.conversation_manager.route_message(process_msg)\n        assert process_result is not None\n    \n        # Simulate module processing\n        processed_data = await processor.process({\n            \"data\": [1, 2, 3, 4, 5],\n            \"conversation_id\": conversation_id\n        })\n    \n        # Step 2: Analyze processed data\n        analyze_msg = ConversationMessage.create(\n            source=\"DataProcessor\",\n            target=\"DataAnalyzer\",\n            msg_type=\"analyze\",\n            content=processed_data[\"result\"],\n            conversation_id=conversation_id,\n            turn_number=3\n        )\n    \n        analyze_result = await comm.conversation_manager.route_message(analyze_msg)\n        assert analyze_result is not None\n    \n        # Simulate analysis\n        analysis = await analyzer.process({\n            \"processed\": processed_data[\"result\"],\n            \"conversation_id\": conversation_id\n        })\n    \n        # Step 3: Generate report\n        report_msg = ConversationMessage.create(\n            source=\"DataAnalyzer\",\n            target=\"ReportGenerator\",\n            msg_type=\"generate_report\",\n            content=analysis,\n            conversation_id=conversation_id,\n            turn_number=4\n        )\n    \n        report_result = await comm.conversation_manager.route_message(report_msg)\n        assert report_result is not None\n    \n        # Simulate report generation\n        final_report = await reporter.process({\n            \"analysis\": analysis[\"analysis\"],\n            \"conversation_id\": conversation_id\n        })\n    \n        # Verify complete workflow\n        assert len(processor.processed_data) > 0\n        assert len(analyzer.analyses) > 0\n        assert len(reporter.reports) > 0\n        assert final_report[\"report\"][\"conversation_aware\"]\n    \n        # Complete conversation\n        await comm.conversation_manager.complete_conversation(conversation_id)\n    \n        # Get conversation history\n        history = await comm.conversation_manager.get_conversation_history(conversation_id)\n>       assert len(history) >= 3  # At least 3 messages exchanged\nE       AssertionError: assert 1 >= 3\nE        +  where 1 = len([{'context': {}, 'conversation_id': 'd55f018c-934a-45b3-959d-ad48d4951b11', 'last_activity': '2025-06-02T07:31:02.553510', 'participants': ['DataProcessor', 'DataAnalyzer'], ...}])\n\ntests/test_conversation_integration.py:293: AssertionError"}, "teardown": {"duration": 0.0003750571049749851, "outcome": "passed"}}, {"nodeid": "tests/test_conversation_integration.py::test_concurrent_conversations", "lineno": 319, "outcome": "failed", "keywords": ["test_concurrent_conversations", "asyncio", "pytestmark", "test_conversation_integration.py", "tests", "claude-module-communicator", ""], "setup": {"duration": 0.0003953971900045872, "outcome": "passed"}, "call": {"duration": 0.6499422551132739, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/claude-module-communicator/tests/test_conversation_integration.py", "lineno": 452, "message": "assert 0.6494674682617188 > 2.0"}, "traceback": [{"path": "tests/test_conversation_integration.py", "lineno": 452, "message": "AssertionError"}], "stdout": "\nTest Evidence: {'conversation_id': 'ca45e3b5-eca0-495d-ba92-9179bdd45a0e', 'conversations_created': 4, 'concurrent_conversations': 4, 'history_maintained': True, 'total_duration_seconds': 0.6494674682617188, 'conversation_management': True, 'turn_number': 18, 'modules_involved': 4}\n", "stderr": "2025-06-02 07:31:02.647 | INFO     | claude_coms.core.modules.module_registry:_load_registry:61 - Loaded 12 modules from registry\n2025-06-02 07:31:02.647 | INFO     | claude_coms.core.modules.module_registry:__init__:51 - Initialized ModuleRegistry with file: test_registry.json\n2025-06-02 07:31:02.647 | INFO     | claude_coms.core.modules.claude_code_communicator:__init__:47 - Initialized ClaudeCodeCommunicator for module 'Module1'\n2025-06-02 07:31:02.647 | INFO     | claude_coms.core.modules.base_module:__init__:63 - Initialized module: Module1\n2025-06-02 07:31:02.648 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: start_conversation\n2025-06-02 07:31:02.648 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: continue_conversation\n2025-06-02 07:31:02.648 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: end_conversation\n2025-06-02 07:31:02.648 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: get_conversation_state\n2025-06-02 07:31:02.648 | DEBUG    | claude_coms.core.modules.module_registry:_save_registry:75 - Saved registry with 12 modules\n2025-06-02 07:31:02.648 | SUCCESS  | claude_coms.core.modules.module_registry:register_module:84 - Registered module: Module1\n2025-06-02 07:31:02.648 | INFO     | claude_coms.core.modules.claude_code_communicator:__init__:47 - Initialized ClaudeCodeCommunicator for module 'Module2'\n2025-06-02 07:31:02.648 | INFO     | claude_coms.core.modules.base_module:__init__:63 - Initialized module: Module2\n2025-06-02 07:31:02.648 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: start_conversation\n2025-06-02 07:31:02.648 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: continue_conversation\n2025-06-02 07:31:02.649 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: end_conversation\n2025-06-02 07:31:02.649 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: get_conversation_state\n2025-06-02 07:31:02.649 | DEBUG    | claude_coms.core.modules.module_registry:_save_registry:75 - Saved registry with 12 modules\n2025-06-02 07:31:02.649 | SUCCESS  | claude_coms.core.modules.module_registry:register_module:84 - Registered module: Module2\n2025-06-02 07:31:02.649 | INFO     | claude_coms.core.modules.claude_code_communicator:__init__:47 - Initialized ClaudeCodeCommunicator for module 'Module3'\n2025-06-02 07:31:02.649 | INFO     | claude_coms.core.modules.base_module:__init__:63 - Initialized module: Module3\n2025-06-02 07:31:02.649 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: start_conversation\n2025-06-02 07:31:02.649 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: continue_conversation\n2025-06-02 07:31:02.649 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: end_conversation\n2025-06-02 07:31:02.649 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: get_conversation_state\n2025-06-02 07:31:02.650 | DEBUG    | claude_coms.core.modules.module_registry:_save_registry:75 - Saved registry with 13 modules\n2025-06-02 07:31:02.650 | SUCCESS  | claude_coms.core.modules.module_registry:register_module:84 - Registered module: Module3\n2025-06-02 07:31:02.650 | INFO     | claude_coms.core.modules.claude_code_communicator:__init__:47 - Initialized ClaudeCodeCommunicator for module 'Module4'\n2025-06-02 07:31:02.650 | INFO     | claude_coms.core.modules.base_module:__init__:63 - Initialized module: Module4\n2025-06-02 07:31:02.650 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: start_conversation\n2025-06-02 07:31:02.650 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: continue_conversation\n2025-06-02 07:31:02.650 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: end_conversation\n2025-06-02 07:31:02.650 | DEBUG    | claude_coms.core.modules.base_module:register_handler:93 - Registered handler for message type: get_conversation_state\n2025-06-02 07:31:02.651 | DEBUG    | claude_coms.core.modules.module_registry:_save_registry:75 - Saved registry with 14 modules\n2025-06-02 07:31:02.651 | SUCCESS  | claude_coms.core.modules.module_registry:register_module:84 - Registered module: Module4\n", "longrepr": "@pytest.mark.asyncio\n    async def test_concurrent_conversations():\n        \"\"\"Test multiple concurrent conversations between different module pairs.\"\"\"\n        start_time = time.time()\n    \n        # Initialize communicator\n        comm = ModuleCommunicator(registry_path=\"test_registry.json\")\n    \n        # Create modules\n        modules = {}\n        for i in range(4):\n            # Create a simple test module\n            class TestModule(ConversationModule):\n                def get_input_schema(self):\n                    return {\"type\": \"object\"}\n                def get_output_schema(self):\n                    return {\"type\": \"object\"}\n                async def process(self, data: Dict[str, Any]) -> Dict[str, Any]:\n                    await asyncio.sleep(0.05)\n                    return {\"response\": f\"Processed by {self.name}\", \"data\": data}\n    \n            module = TestModule(\n                name=f\"Module{i+1}\",\n                system_prompt=f\"Test module {i+1} for concurrent conversations\",\n                capabilities=[\"conversation\", \"test\"],\n                auto_register=False\n            )\n            await module.start()\n            modules[f\"Module{i+1}\"] = module\n            comm.register_module(f\"Module{i+1}\", module)\n    \n        # Start multiple concurrent conversations\n        conversations = []\n        tasks = []\n    \n        # Conversation 1: Module1 <-> Module2\n        conv1 = await comm.start_conversation(\n            \"Module1\", \"Module2\",\n            {\"task\": \"concurrent_test_1\"},\n            \"test\"\n        )\n        conversations.append(conv1[\"conversation_id\"])\n    \n        # Conversation 2: Module2 <-> Module3\n        conv2 = await comm.start_conversation(\n            \"Module2\", \"Module3\",\n            {\"task\": \"concurrent_test_2\"},\n            \"test\"\n        )\n        conversations.append(conv2[\"conversation_id\"])\n    \n        # Conversation 3: Module3 <-> Module4\n        conv3 = await comm.start_conversation(\n            \"Module3\", \"Module4\",\n            {\"task\": \"concurrent_test_3\"},\n            \"test\"\n        )\n        conversations.append(conv3[\"conversation_id\"])\n    \n        # Conversation 4: Module1 <-> Module4\n        conv4 = await comm.start_conversation(\n            \"Module1\", \"Module4\",\n            {\"task\": \"concurrent_test_4\"},\n            \"test\"\n        )\n        conversations.append(conv4[\"conversation_id\"])\n    \n        # Run conversations concurrently\n        async def run_conversation(conv_id: str, source: str, target: str, num_turns: int):\n            \"\"\"Run a conversation for multiple turns.\"\"\"\n            for turn in range(num_turns):\n                msg = ConversationMessage.create(\n                    source=source if turn % 2 == 0 else target,\n                    target=target if turn % 2 == 0 else source,\n                    msg_type=\"test_message\",\n                    content={\"turn\": turn + 1, \"data\": f\"Message {turn + 1}\"},\n                    conversation_id=conv_id,\n                    turn_number=turn + 2  # +2 because turn 1 was initial message\n                )\n    \n                result = await comm.conversation_manager.route_message(msg)\n                assert result is not None\n    \n                # Small delay between turns\n                await asyncio.sleep(0.05)\n    \n        # Create tasks for concurrent execution\n        tasks = [\n            run_conversation(conversations[0], \"Module1\", \"Module2\", 5),\n            run_conversation(conversations[1], \"Module2\", \"Module3\", 4),\n            run_conversation(conversations[2], \"Module3\", \"Module4\", 3),\n            run_conversation(conversations[3], \"Module1\", \"Module4\", 6)\n        ]\n    \n        # Run all conversations concurrently\n        await asyncio.gather(*tasks)\n    \n        # Verify all conversations completed\n        for conv_id in conversations:\n            state = await comm.conversation_manager.get_conversation_state(conv_id)\n            assert state is not None\n            assert state.turn_count > 0\n    \n        # Get analytics\n        analytics = await comm.get_conversation_analytics()\n        assert analytics[\"total_conversations\"] >= 4\n        assert analytics[\"active\"] >= 0  # Some may have completed\n    \n        # Complete all conversations\n        for conv_id in conversations:\n            await comm.conversation_manager.complete_conversation(conv_id)\n    \n        total_time = time.time() - start_time\n    \n        # Generate evidence\n        evidence = {\n            \"conversation_id\": conversations[0],  # Show first conversation\n            \"conversations_created\": len(conversations),\n            \"concurrent_conversations\": 4,\n            \"history_maintained\": True,\n            \"total_duration_seconds\": total_time,\n            \"conversation_management\": True,\n            \"turn_number\": sum([5, 4, 3, 6]),  # Total turns across all conversations\n            \"modules_involved\": 4\n        }\n        print(f\"\\nTest Evidence: {evidence}\")\n    \n        # Cleanup\n        for module in modules.values():\n            await module.stop()\n    \n        # Verify timing\n>       assert total_time > 2.0  # Should take time for concurrent operations\nE       assert 0.6494674682617188 > 2.0\n\ntests/test_conversation_integration.py:452: AssertionError"}, "teardown": {"duration": 0.0002893749624490738, "outcome": "passed"}}, {"nodeid": "tests/test_conversation_integration.py::test_docs_exist", "lineno": 455, "outcome": "failed", "keywords": ["test_docs_exist", "asyncio", "pytestmark", "test_conversation_integration.py", "tests", "claude-module-communicator", ""], "setup": {"duration": 0.00033228518441319466, "outcome": "passed"}, "call": {"duration": 0.00024711526930332184, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/claude-module-communicator/tests/test_conversation_integration.py", "lineno": 463, "message": "AssertionError: Conversation API documentation not found\nassert False\n +  where False = exists()\n +    where exists = PosixPath('docs/conversation_api.md').exists"}, "traceback": [{"path": "tests/test_conversation_integration.py", "lineno": 463, "message": "AssertionError"}], "longrepr": "@pytest.mark.asyncio\n    async def test_docs_exist():\n        \"\"\"HONEYPOT: Test that documentation exists (should fail).\"\"\"\n        start_time = time.time()\n    \n        # Check for documentation files that don't exist yet\n        docs_path = Path(\"docs/conversation_api.md\")\n>       assert docs_path.exists(), \"Conversation API documentation not found\"\nE       AssertionError: Conversation API documentation not found\nE       assert False\nE        +  where False = exists()\nE        +    where exists = PosixPath('docs/conversation_api.md').exists\n\ntests/test_conversation_integration.py:463: AssertionError"}, "teardown": {"duration": 0.0002146637998521328, "outcome": "passed"}}]}