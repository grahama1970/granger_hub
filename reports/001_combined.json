{
  "summary": {
    "total": 3,
    "passed": 2,
    "failed": 1
  },
  "tests": [
    {
      "nodeid": "tests/adapters/test_rest_adapter.py::TestRESTAdapterReal::test_real_http_request",
      "lineno": 93,
      "outcome": "failed",
      "keywords": [
        "test_real_http_request",
        "asyncio",
        "pytestmark",
        "TestRESTAdapterReal",
        "test_rest_adapter.py",
        "adapters",
        "tests",
        "claude-module-communicator",
        ""
      ],
      "setup": {
        "duration": 0.0008184961043298244,
        "outcome": "passed"
      },
      "call": {
        "duration": 5.17826916789636,
        "outcome": "failed",
        "crash": {
          "path": "/home/graham/workspace/experiments/claude-module-communicator/tests/adapters/test_rest_adapter.py",
          "lineno": 127,
          "message": "AssertionError: assert 'date' in {'Access-Control-Allow-Credentials': 'true', 'Access-Control-Allow-Origin': '*', 'Connection': 'keep-alive', 'Content-Length': '414', ...}"
        },
        "traceback": [
          {
            "path": "tests/adapters/test_rest_adapter.py",
            "lineno": 127,
            "message": "AssertionError"
          }
        ],
        "longrepr": "self = <test_rest_adapter.TestRESTAdapterReal object at 0x7dbce398ab30>\n\n    @pytest.mark.asyncio\n    async def test_real_http_request(self):\n        \"\"\"Test making real HTTP GET request.\"\"\"\n        start_time = time.time()\n    \n        config = AdapterConfig(name=\"httpbin-test\", protocol=\"rest\", timeout=30)\n        adapter = RESTAdapter(config, base_url=\"https://httpbin.org\")\n    \n        # Connect (tests endpoint availability)\n        connected = await adapter.connect()\n        assert connected, \"Failed to connect to httpbin.org\"\n    \n        # Make real HTTP request\n        result = await adapter.send({\n            \"method\": \"GET\",\n            \"endpoint\": \"/get\",\n            \"params\": {\"test\": \"value\", \"timestamp\": str(time.time())}\n        })\n    \n        duration = time.time() - start_time\n    \n        # Verify real HTTP response\n        assert result[\"success\"] is True\n        assert result[\"status_code\"] == 200\n        assert result[\"latency_ms\"] > 10, f\"HTTP latency too low ({result['latency_ms']}ms) - might be mocked\"\n        assert result[\"latency_ms\"] < 5000, f\"HTTP latency too high ({result['latency_ms']}ms)\"\n    \n        # Verify response data\n        assert \"args\" in result[\"data\"]\n        assert result[\"data\"][\"args\"][\"test\"] == \"value\"\n    \n        # Check headers to verify real HTTP\n        # Note: httpbin.org may not always return 'server' header\n>       assert \"date\" in result[\"headers\"]\nE       AssertionError: assert 'date' in {'Access-Control-Allow-Credentials': 'true', 'Access-Control-Allow-Origin': '*', 'Connection': 'keep-alive', 'Content-Length': '414', ...}\n\ntests/adapters/test_rest_adapter.py:127: AssertionError"
      },
      "teardown": {
        "duration": 0.00047937873750925064,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/adapters/test_mcp_adapter.py::TestMCPAdapterReal::test_real_mcp_connection",
      "lineno": 112,
      "outcome": "passed",
      "keywords": [
        "test_real_mcp_connection",
        "asyncio",
        "pytestmark",
        "TestMCPAdapterReal",
        "test_mcp_adapter.py",
        "adapters",
        "tests",
        "claude-module-communicator",
        ""
      ],
      "setup": {
        "duration": 0.0012406762689352036,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.10043588420376182,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.00028409529477357864,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "tests/adapters/test_adapter_honeypot.py::TestAdapterHoneypot::test_impossible_zero_latency",
      "lineno": 42,
      "outcome": "passed",
      "keywords": [
        "test_impossible_zero_latency",
        "asyncio",
        "pytestmark",
        "TestAdapterHoneypot",
        "test_adapter_honeypot.py",
        "adapters",
        "tests",
        "claude-module-communicator",
        ""
      ],
      "setup": {
        "duration": 0.0007361047901213169,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.00030382629483938217,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0002349340356886387,
        "outcome": "passed"
      }
    }
  ],
  "created": 1748538222.614757,
  "duration": 6.705818176269531,
  "environment": {}
}